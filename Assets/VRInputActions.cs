//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/VRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/VRInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @VRInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @VRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInputActions"",
    ""maps"": [
        {
            ""name"": ""VRHands"",
            ""id"": ""a5f83bb8-8aaf-4e87-a482-c9b4bfbef686"",
            ""actions"": [
                {
                    ""name"": ""LeftPrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""a1f0a2a6-3b68-4fc2-9ef9-fc9deae938ad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftSecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""4f1d20b7-34b9-4053-9a6e-d7a5e5e86f17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMenuButton"",
                    ""type"": ""Button"",
                    ""id"": ""c1e5dd9e-cf1f-44b2-96bb-fd6c97ca326f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftGrip"",
                    ""type"": ""Value"",
                    ""id"": ""78e9c7b8-5207-42d8-867d-5ff6bde96fbc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""e76ec39f-0f60-4c5a-8e53-8e7d4b6368b8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""d1f41812-4c8a-4b14-8057-05d7c502f7c6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightPrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""f012c40f-4a9e-49d6-8ae3-2ab31f9d9a9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightSecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""5c6b7a57-b9b0-45b2-919b-20a1910c783e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMenuButton"",
                    ""type"": ""Button"",
                    ""id"": ""601ea45b-953f-4221-9a5f-6c10ea8f92bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightGrip"",
                    ""type"": ""Value"",
                    ""id"": ""aa650f06-7f68-4748-9c7a-08a6b2db94ad"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""1a5d6b04-f6c7-4a56-980b-4ebf85878a7d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""41a7eb9e-4019-4e1a-b5d5-5b93db987e02"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5bb67519-fd3b-41c1-8320-367e1321c6e2"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""LeftPrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c392d2b-7f2a-4622-9873-6c22985b8b34"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""LeftSecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba4a8a9e-7de5-4a7e-9f6b-d3bc91f519d8"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""LeftMenuButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8a45c94-0e1e-4f32-a0c8-ecb45ed3be39"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""LeftGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44511f56-0d2e-4de7-a9bc-147adfdaea84"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b52ec9ec-457f-45d9-90bc-8fa1c7ae2ef7"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""LeftJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ab895d9-1368-4966-b1b9-132e2072a2c4"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""RightPrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3af22bde-e02a-4e94-9b4f-242f7b9124f1"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""RightSecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a39809ae-9f88-4f52-b4f4-2cfc2eea02a3"",
                    ""path"": ""<XRController>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""RightMenuButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63b210a4-7b5d-4608-a847-b593b5a7d62d"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""RightGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22f98e99-bb18-4a68-8f44-3ef54722d5f4"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3d0a417-206b-4c04-a00f-65a5366f0c34"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""RightJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // VRHands
        m_VRHands = asset.FindActionMap("VRHands", throwIfNotFound: true);
        m_VRHands_LeftPrimaryButton = m_VRHands.FindAction("LeftPrimaryButton", throwIfNotFound: true);
        m_VRHands_LeftSecondaryButton = m_VRHands.FindAction("LeftSecondaryButton", throwIfNotFound: true);
        m_VRHands_LeftMenuButton = m_VRHands.FindAction("LeftMenuButton", throwIfNotFound: true);
        m_VRHands_LeftGrip = m_VRHands.FindAction("LeftGrip", throwIfNotFound: true);
        m_VRHands_LeftTrigger = m_VRHands.FindAction("LeftTrigger", throwIfNotFound: true);
        m_VRHands_LeftJoystick = m_VRHands.FindAction("LeftJoystick", throwIfNotFound: true);
        m_VRHands_RightPrimaryButton = m_VRHands.FindAction("RightPrimaryButton", throwIfNotFound: true);
        m_VRHands_RightSecondaryButton = m_VRHands.FindAction("RightSecondaryButton", throwIfNotFound: true);
        m_VRHands_RightMenuButton = m_VRHands.FindAction("RightMenuButton", throwIfNotFound: true);
        m_VRHands_RightGrip = m_VRHands.FindAction("RightGrip", throwIfNotFound: true);
        m_VRHands_RightTrigger = m_VRHands.FindAction("RightTrigger", throwIfNotFound: true);
        m_VRHands_RightJoystick = m_VRHands.FindAction("RightJoystick", throwIfNotFound: true);
    }

    ~@VRInputActions()
    {
        UnityEngine.Debug.Assert(!m_VRHands.enabled, "This will cause a leak and performance issues, VRInputActions.VRHands.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VRHands
    private readonly InputActionMap m_VRHands;
    private List<IVRHandsActions> m_VRHandsActionsCallbackInterfaces = new List<IVRHandsActions>();
    private readonly InputAction m_VRHands_LeftPrimaryButton;
    private readonly InputAction m_VRHands_LeftSecondaryButton;
    private readonly InputAction m_VRHands_LeftMenuButton;
    private readonly InputAction m_VRHands_LeftGrip;
    private readonly InputAction m_VRHands_LeftTrigger;
    private readonly InputAction m_VRHands_LeftJoystick;
    private readonly InputAction m_VRHands_RightPrimaryButton;
    private readonly InputAction m_VRHands_RightSecondaryButton;
    private readonly InputAction m_VRHands_RightMenuButton;
    private readonly InputAction m_VRHands_RightGrip;
    private readonly InputAction m_VRHands_RightTrigger;
    private readonly InputAction m_VRHands_RightJoystick;
    /// <summary>
    /// Provides access to input actions defined in input action map "VRHands".
    /// </summary>
    public struct VRHandsActions
    {
        private @VRInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public VRHandsActions(@VRInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "VRHands/LeftPrimaryButton".
        /// </summary>
        public InputAction @LeftPrimaryButton => m_Wrapper.m_VRHands_LeftPrimaryButton;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/LeftSecondaryButton".
        /// </summary>
        public InputAction @LeftSecondaryButton => m_Wrapper.m_VRHands_LeftSecondaryButton;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/LeftMenuButton".
        /// </summary>
        public InputAction @LeftMenuButton => m_Wrapper.m_VRHands_LeftMenuButton;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/LeftGrip".
        /// </summary>
        public InputAction @LeftGrip => m_Wrapper.m_VRHands_LeftGrip;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/LeftTrigger".
        /// </summary>
        public InputAction @LeftTrigger => m_Wrapper.m_VRHands_LeftTrigger;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/LeftJoystick".
        /// </summary>
        public InputAction @LeftJoystick => m_Wrapper.m_VRHands_LeftJoystick;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/RightPrimaryButton".
        /// </summary>
        public InputAction @RightPrimaryButton => m_Wrapper.m_VRHands_RightPrimaryButton;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/RightSecondaryButton".
        /// </summary>
        public InputAction @RightSecondaryButton => m_Wrapper.m_VRHands_RightSecondaryButton;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/RightMenuButton".
        /// </summary>
        public InputAction @RightMenuButton => m_Wrapper.m_VRHands_RightMenuButton;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/RightGrip".
        /// </summary>
        public InputAction @RightGrip => m_Wrapper.m_VRHands_RightGrip;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/RightTrigger".
        /// </summary>
        public InputAction @RightTrigger => m_Wrapper.m_VRHands_RightTrigger;
        /// <summary>
        /// Provides access to the underlying input action "VRHands/RightJoystick".
        /// </summary>
        public InputAction @RightJoystick => m_Wrapper.m_VRHands_RightJoystick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_VRHands; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="VRHandsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(VRHandsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="VRHandsActions" />
        public void AddCallbacks(IVRHandsActions instance)
        {
            if (instance == null || m_Wrapper.m_VRHandsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRHandsActionsCallbackInterfaces.Add(instance);
            @LeftPrimaryButton.started += instance.OnLeftPrimaryButton;
            @LeftPrimaryButton.performed += instance.OnLeftPrimaryButton;
            @LeftPrimaryButton.canceled += instance.OnLeftPrimaryButton;
            @LeftSecondaryButton.started += instance.OnLeftSecondaryButton;
            @LeftSecondaryButton.performed += instance.OnLeftSecondaryButton;
            @LeftSecondaryButton.canceled += instance.OnLeftSecondaryButton;
            @LeftMenuButton.started += instance.OnLeftMenuButton;
            @LeftMenuButton.performed += instance.OnLeftMenuButton;
            @LeftMenuButton.canceled += instance.OnLeftMenuButton;
            @LeftGrip.started += instance.OnLeftGrip;
            @LeftGrip.performed += instance.OnLeftGrip;
            @LeftGrip.canceled += instance.OnLeftGrip;
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @LeftJoystick.started += instance.OnLeftJoystick;
            @LeftJoystick.performed += instance.OnLeftJoystick;
            @LeftJoystick.canceled += instance.OnLeftJoystick;
            @RightPrimaryButton.started += instance.OnRightPrimaryButton;
            @RightPrimaryButton.performed += instance.OnRightPrimaryButton;
            @RightPrimaryButton.canceled += instance.OnRightPrimaryButton;
            @RightSecondaryButton.started += instance.OnRightSecondaryButton;
            @RightSecondaryButton.performed += instance.OnRightSecondaryButton;
            @RightSecondaryButton.canceled += instance.OnRightSecondaryButton;
            @RightMenuButton.started += instance.OnRightMenuButton;
            @RightMenuButton.performed += instance.OnRightMenuButton;
            @RightMenuButton.canceled += instance.OnRightMenuButton;
            @RightGrip.started += instance.OnRightGrip;
            @RightGrip.performed += instance.OnRightGrip;
            @RightGrip.canceled += instance.OnRightGrip;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
            @RightJoystick.started += instance.OnRightJoystick;
            @RightJoystick.performed += instance.OnRightJoystick;
            @RightJoystick.canceled += instance.OnRightJoystick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="VRHandsActions" />
        private void UnregisterCallbacks(IVRHandsActions instance)
        {
            @LeftPrimaryButton.started -= instance.OnLeftPrimaryButton;
            @LeftPrimaryButton.performed -= instance.OnLeftPrimaryButton;
            @LeftPrimaryButton.canceled -= instance.OnLeftPrimaryButton;
            @LeftSecondaryButton.started -= instance.OnLeftSecondaryButton;
            @LeftSecondaryButton.performed -= instance.OnLeftSecondaryButton;
            @LeftSecondaryButton.canceled -= instance.OnLeftSecondaryButton;
            @LeftMenuButton.started -= instance.OnLeftMenuButton;
            @LeftMenuButton.performed -= instance.OnLeftMenuButton;
            @LeftMenuButton.canceled -= instance.OnLeftMenuButton;
            @LeftGrip.started -= instance.OnLeftGrip;
            @LeftGrip.performed -= instance.OnLeftGrip;
            @LeftGrip.canceled -= instance.OnLeftGrip;
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @LeftJoystick.started -= instance.OnLeftJoystick;
            @LeftJoystick.performed -= instance.OnLeftJoystick;
            @LeftJoystick.canceled -= instance.OnLeftJoystick;
            @RightPrimaryButton.started -= instance.OnRightPrimaryButton;
            @RightPrimaryButton.performed -= instance.OnRightPrimaryButton;
            @RightPrimaryButton.canceled -= instance.OnRightPrimaryButton;
            @RightSecondaryButton.started -= instance.OnRightSecondaryButton;
            @RightSecondaryButton.performed -= instance.OnRightSecondaryButton;
            @RightSecondaryButton.canceled -= instance.OnRightSecondaryButton;
            @RightMenuButton.started -= instance.OnRightMenuButton;
            @RightMenuButton.performed -= instance.OnRightMenuButton;
            @RightMenuButton.canceled -= instance.OnRightMenuButton;
            @RightGrip.started -= instance.OnRightGrip;
            @RightGrip.performed -= instance.OnRightGrip;
            @RightGrip.canceled -= instance.OnRightGrip;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
            @RightJoystick.started -= instance.OnRightJoystick;
            @RightJoystick.performed -= instance.OnRightJoystick;
            @RightJoystick.canceled -= instance.OnRightJoystick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VRHandsActions.UnregisterCallbacks(IVRHandsActions)" />.
        /// </summary>
        /// <seealso cref="VRHandsActions.UnregisterCallbacks(IVRHandsActions)" />
        public void RemoveCallbacks(IVRHandsActions instance)
        {
            if (m_Wrapper.m_VRHandsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="VRHandsActions.AddCallbacks(IVRHandsActions)" />
        /// <seealso cref="VRHandsActions.RemoveCallbacks(IVRHandsActions)" />
        /// <seealso cref="VRHandsActions.UnregisterCallbacks(IVRHandsActions)" />
        public void SetCallbacks(IVRHandsActions instance)
        {
            foreach (var item in m_Wrapper.m_VRHandsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRHandsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="VRHandsActions" /> instance referencing this action map.
    /// </summary>
    public VRHandsActions @VRHands => new VRHandsActions(this);
    private int m_XRSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "VRHands" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="VRHandsActions.AddCallbacks(IVRHandsActions)" />
    /// <seealso cref="VRHandsActions.RemoveCallbacks(IVRHandsActions)" />
    public interface IVRHandsActions
    {
        /// <summary>
        /// Method invoked when associated input action "LeftPrimaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftPrimaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftSecondaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftSecondaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftMenuButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftMenuButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftGrip" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftGrip(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftTrigger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftTrigger(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftJoystick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftJoystick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightPrimaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightPrimaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightSecondaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightSecondaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightMenuButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightMenuButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightGrip" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightGrip(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightTrigger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightTrigger(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightJoystick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightJoystick(InputAction.CallbackContext context);
    }
}
